#!/usr/bin/env bash

function usage() {
    echo USAGE: venv -f env-file.yaml
    echo EXAMPLE: venv -f env-dev.yaml
}

if [[ $1 == "venv" ]]; then
    if [[ -z $2 ]]; then
        usage
        exit 1
    fi

    if [[ $2 == "-f" || $2 == "--file" ]]; then
        ENV_FILE=$3

        if [[ -z $ENV_FILE ]]; then
            echo Missing environment file.
            echo
            usage
            exit 1
        fi
    else
        usage
    fi

    if [[ ! -f $ENV_FILE ]]; then
        echo Environment file not found $ENV_FILE
        exit 1
    fi

    echo Reading environment config from $ENV_FILE 1>&2

    AWS_ACCOUNT_ID=`yq .aws.accountID $ENV_FILE`
    AWS_PROFILE=`yq .aws.profile $ENV_FILE`
    AWS_REGION=`yq .aws.region $ENV_FILE`

    if [[ $4 != "--skip-config" && $4 != "-s" ]]; then
        echo 1>&2
        echo Configuring AWS profile $AWS_PROFILE for account $AWS_ACCOUNT_ID 1>&2

        # Run AWS configuration and login
        aws configure set --profile $AWS_PROFILE sso_start_url https://osloorigo.awsapps.com/start >&2
        aws configure set --profile $AWS_PROFILE sso_region eu-west-1 >&2
        aws configure set --profile $AWS_PROFILE sso_account_id $AWS_ACCOUNT_ID >&2
        aws configure set --profile $AWS_PROFILE sso_role_name AWSAdministratorAccess >&2
        aws configure set --profile $AWS_PROFILE region $AWS_REGION >&2
        aws configure set --profile $AWS_PROFILE output json >&2

        echo 1>&2
        echo Logging into AWS: 1>&2
        echo 1>&2

        aws sso login --profile $AWS_PROFILE 1>&2
    fi

    echo 1>&2

    # Output settings
    PROJECT_NAME=$(yq .metadata.project $ENV_FILE)

    if [[ ! -z $YK_FISH_EXISTS ]]; then
        # User is using Fish
        if [[ -z ${IS_FISH_SOURCED} ]]; then
            echo "Tip: Source the output of this command to set the AWS and Terraform environment variables in your current shell:" 1>&2
            echo 1>&2
            echo "    okenv $@" 1>&2
        else
            # User is running this command with the source prefix 'fs'
            # Note to self: If shebang is fish, we must use "echo set -x AWS_PROFILE $AWS_PROFILE" here.

            echo export AWS_PROFILE=$AWS_PROFILE
            echo export AWS_REGION=$AWS_REGION

            echo export TF_VAR_region=$AWS_REGION
            echo export TF_VAR_project_name=$PROJECT_NAME
        fi
        
        echo 1>&2
        echo set -x AWS_PROFILE $AWS_PROFILE 1>&2
        echo set -x AWS_REGION $AWS_REGION 1>&2

        echo set -x TF_VAR_region $AWS_REGION 1>&2
        echo set -x TF_VAR_project_name $PROJECT_NAME 1>&2
        echo 1>&2
    elif [[ ! -z ${BASH_VERSION} || ! -z ${ZSH_VERSION} ]]; then
        # User is using Bash or Zsh

        [[ "${BASH_SOURCE[0]}" != "${0}" || $ZSH_EVAL_CONTEXT =~ :file$ ]] && IS_SOURCED=true

        if [[ ! $IS_SOURCED == "true" ]]; then
            ME=$(basename $0)

            echo 1>&2
            echo "Tip: Source the output of this command to set the AWS and Terraform environment variables in your current shell:" 1>&2
            echo 1>&2

            echo "    . $ME $@" 1>&2
            echo 1>&2
        fi

        echo 1>&2
        echo export AWS_PROFILE=$AWS_PROFILE
        echo export AWS_REGION=$AWS_REGION

        echo export TF_VAR_region=$AWS_REGION
        echo export TF_VAR_project_name=$PROJECT_NAME
        echo 1>&2
    else
        echo "Terminal is not supported, so you will have to set this environment variable manually:"
        echo AWS_PROFILE="$AWS_PROFILE"
        echo 1>&2
    fi
fi

if [[ $1 == "init" ]]; then
    echo Some init
fi

if [[ $1 == "sso" ]]; then
    echo Some SSO
fi

if [[ $1 == "version" ]]; then
    echo Terraform version
    terraform version
fi

if [[ $* == "-h" || -z "$1" ]]
then
    ME=$(basename $0)
    echo "USAGE:"
    echo "$ME venv"
    echo "$ME init"
    echo "$ME sso"
    echo "$ME version"
    echo
    echo "-h            Show this help"
    return 0 2> /dev/null || exit 0
fi
